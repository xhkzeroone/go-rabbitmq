// Package consumer cung c·∫•p c√°c ti·ªán √≠ch (RabbitManager, Consumer, ...) ƒë·ªÉ
// x√¢y d·ª±ng h·ªá th·ªëng ti√™u th·ª• RabbitMQ c√≥ kh·∫£ nƒÉng t·ª± ƒë·ªông reconnect c·∫£
// connection v√† channel.
//
// Tri·∫øt l√Ω thi·∫øt k·∫ø:
//
//  1. *RabbitManager* duy tr√¨ **m·ªôt** k·∫øt n·ªëi (*amqp.Connection*) v√† chia s·∫ª
//     k·∫øt n·ªëi n√†y cho nhi·ªÅu *Consumer* d∆∞·ªõi d·∫°ng c√°c k√™nh AMQP ƒë·ªôc l·∫≠p.
//  2. M·ªói *Consumer* **t·ª± gi√°m s√°t** k√™nh c·ªßa ch√≠nh m√¨nh (NotifyClose) v√† ch·ªß
//     ƒë·ªông m·ªü l·∫°i k√™nh khi b·ªã ƒë√≥ng, KH√îNG c·∫ßn t√°c ƒë·ªông t·ªõi connection.
//  3. *RabbitManager* gi√°m s√°t connection g·ªëc v√† t·ª± ƒë·ªông kh√¥i ph·ª•c l·∫°i khi
//     k·∫øt n·ªëi b·ªã m·∫•t; vi·ªác reconnect ƒë∆∞·ª£c th·ª±c hi·ªán v·ªõi chi·∫øn l∆∞·ª£c back‚Äëoff
//     c√≥ jitter ƒë·ªÉ tr√°nh b√£o reconnect.
//  4. To√†n b·ªô m√£ ngu·ªìn ƒë∆∞·ª£c b√¨nh lu·∫≠n chi ti·∫øt b·∫±ng ti·∫øng Vi·ªát v√† tu√¢n th·ªß
//     quy t·∫Øc "Go doc":
//     ‚Ä¢ M·ªçi t√™n xu·∫•t (exported) ƒë·ªÅu c√≥ ch√∫ th√≠ch b·∫Øt ƒë·∫ßu b·∫±ng ch√≠nh t√™n ƒë√≥.
//     ‚Ä¢ T√™n private quan tr·ªçng c≈©ng c√≥ ch√∫ th√≠ch ng·∫Øn g·ªçn khi c·∫ßn.
//
// C√°ch s·ª≠ d·ª•ng t·ªëi thi·ªÉu:
//
//	mgr := consumer.New(cfg)
//	mgr.Register(&MyLogHandler{})
//	ctx := context.Background()
//	if err := mgr.Listen(ctx); err != nil { ... }
//
// Trong ƒë√≥ *MyLogHandler* c·∫ßn tri·ªÉn khai interface *Handler* v·ªõi ph∆∞∆°ng th·ª©c
// Handle([]byte) ([]byte, error).
//
// L∆∞u √Ω: File n√†y KH√îNG ch·ª©a ƒë·ªãnh nghƒ©a c·ªßa *QueueConfig*, *Config* ... ‚Äì ch√∫ng
// ƒë∆∞·ª£c khai b√°o ·ªü m·ªôt module kh√°c (ph·∫ßn placeholder b√™n d∆∞·ªõi ch·ªâ ƒë·ªÉ minh ho·∫°).
package consumer

import (
	"context"
	"crypto/tls"
	"crypto/x509"
	"errors"

	"log"
	"math/rand"
	"os"
	"sync"
	"time"

	amqp "github.com/rabbitmq/amqp091-go"
)

/*  --------------------------------------------------------------------------
    üêá  RABBIT MANAGER V2 ‚Äì T·ª∞ ƒê·ªòNG RECONNECT CONNECTION + CHANNEL
    --------------------------------------------------------------------------
    Kh√°c bi·ªát ch√≠nh so v·ªõi V1:
      1. M·ªói Consumer **t·ª± gi√°m s√°t channel ri√™ng** v√† t·ª± m·ªü l·∫°i (re‚Äëopen)
         khi channel b·ªã ƒë√≥ng, KH√îNG c·∫ßn ƒë√≥ng/m·ªü l·∫°i connection.
      2. RabbitManager v·∫´n ch·ªãu tr√°ch nhi·ªám gi√°m s√°t **connection g·ªëc**
         v√† t·ª± ƒë·ªông reconnect khi connection b·ªã drop.
      3. D√πng RWMutex ƒë·ªÉ **chia s·∫ª an to√†n** connection cho nhi·ªÅu Consumer.
*/

// ============================================================================
// üëâ C√°c ki·ªÉu d·ªØ li·ªáu placeholder (ƒë√£ ƒë·ªãnh nghƒ©a ·ªü module kh√°c)
// ============================================================================
/*
   Nh·ªØng ki·ªÉu d∆∞·ªõi ƒë√¢y ch·ªâ ƒë·ªÉ tr√¨nh bi√™n d·ªãch bi·∫øt; h√£y thay th·∫ø b·∫±ng b·∫£n g·ªëc
   trong d·ª± √°n th·ª±c t·∫ø.
*/

// type QueueConfig struct {
// 	Queue, Exchange, BindingKey, ConsumerTag string
// 	Durable, AutoDelete, Passive, AutoAck    bool
// 	Prefetch                                 int
// 	RequeueOnFail                            bool
// 	Arguments                                amqp.Table
// }
//
// type Config struct {
// 	RabbitMQ RabbitMQConfig
// }
//
// type RabbitMQConfig struct {
// 	URL            string
// 	TLS            bool
// 	ReconnectDelay time.Duration
// 	Prefetch       int
// 	ClientCert     string
// 	ClientKey      string
// 	CACert         string
// 	Queues         map[string]QueueConfig
// }
//
// type HandlerFunc func([]byte) ([]byte, error)

// Handler ƒë·ªãnh nghƒ©a interface t·ªëi thi·ªÉu m√† ·ª©ng d·ª•ng c·∫ßn implement ƒë·ªÉ x·ª≠ l√Ω
// message nh·∫≠n ƒë∆∞·ª£c.
//
// H√†m Handle nh·∫≠n *payload* d∆∞·ªõi d·∫°ng []byte, tr·∫£ v·ªÅ []byte (c√≥ th·ªÉ nil) l√†m
// response RPC c√πng error (n·∫øu c√≥).
//
// Comment n√†y d√πng l√†m v√≠ d·ª• cho builder *go doc* ‚Äì trong d·ª± √°n th·∫≠t, Handler
// th∆∞·ªùng ƒë√£ ƒë∆∞·ª£c ƒë·ªãnh nghƒ©a ·ªü package kh√°c.
//
//go:generate mockgen -destination=mocks_test.go -package=consumer . Handler
// (ghi ch√∫ go:generate ch·ªâ minh ho·∫°)
// type Handler interface{ Handle([]byte) ([]byte, error) }

// getStructName tr·∫£ v·ªÅ t√™n ki·ªÉu c·ª• th·ªÉ (kh√¥ng bao g·ªìm package) c·ªßa m·ªôt gi√° tr·ªã
// tri·ªÉn khai interface Handler. H√†m n√†y th∆∞·ªùng ƒë∆∞·ª£c ƒë·ªãnh nghƒ©a ·ªü package utils.
// func getStructName(h Handler) string { return "" /* placeholder */ }

// ============================================================================
// üåê STRUCT RabbitManager ‚Äì qu·∫£n tr·ªã **connection** chia s·∫ª cho nhi·ªÅu Consumer
// ============================================================================

// Logger interface cho ph√©p inject logger custom (vd: slog, zap, logrus)
type Logger interface {
	Infof(format string, args ...interface{})
	Errorf(format string, args ...interface{})
	Debugf(format string, args ...interface{})
}

// logger m·∫∑c ƒë·ªãnh d√πng log.Printf
type stdLogger struct{}

func (l *stdLogger) Infof(format string, args ...interface{}) {
	log.Printf("[INFO] "+format, args...)
}
func (l *stdLogger) Errorf(format string, args ...interface{}) {
	log.Printf("[ERROR] "+format, args...)
}
func (l *stdLogger) Debugf(format string, args ...interface{}) {
	log.Printf("[DEBUG] "+format, args...)
}

// RabbitManager gi·ªØ m·ªôt k·∫øt n·ªëi duy nh·∫•t t·ªõi RabbitMQ v√† ph√¢n ph√°t k·∫øt n·ªëi ƒë√≥
// cho nhi·ªÅu Consumer d∆∞·ªõi d·∫°ng c√°c channel. N√≥ gi√°m s√°t connection g·ªëc v√† t·ª±
// ƒë·ªông reconnect khi connection b·ªã ƒë√≥ng.
//
//	‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ           ‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ
//	‚îÇ RabbitManager‚îÇ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ñ∂‚îÇ  Connection  ‚îÇ 1 connection, share TCP socket
//	‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ           ‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ
//	       ‚îÇ                         ‚ñ≤
//	       ‚îú‚îÄ‚îÄ channel (Consumer A)  ‚îÇ
//	       ‚îú‚îÄ‚îÄ channel (Consumer B)  ‚îÇ multiple AMQP channels (multiplexed)
//	       ‚îî‚îÄ‚îÄ ‚Ä¶                     ‚îÇ
//
// Zero value c·ªßa *RabbitManager* KH√îNG h·ª£p l·ªá; h√£y d√πng h√†m New ƒë·ªÉ kh·ªüi t·∫°o.
// Sau khi t·∫°o, ng∆∞·ªùi d√πng c·∫ßn:
//  1. g·ªçi (*RabbitManager).Register(...) ƒë·ªÉ ƒëƒÉng k√Ω c√°c Handler;
//  2. g·ªçi (*RabbitManager).Listen(ctx) ƒë·ªÉ b·∫Øt ƒë·∫ßu l·∫Øng nghe.
//
// Khi kh√¥ng c√≤n nhu c·∫ßu, h√£y g·ªçi (*RabbitManager).Stop() ƒë·ªÉ d·ª´ng to√†n b·ªô goroutine.
type RabbitManager struct {
	cfg *Config

	// t√†i nguy√™n AMQP
	conn *amqp.Connection
	lock sync.RWMutex // b·∫£o v·ªá conn khi truy c·∫≠p ƒë·ªìng th·ªùi

	handlers  map[string]HandlerFunc // map t√™n struct ‚Üí handler
	consumers []*Consumer            // danh s√°ch Consumer ƒë√£ kh·ªüi t·∫°o

	ctx    context.Context // context g·ªëc (hu·ª∑ ƒë·ªÉ stop)
	cancel context.CancelFunc

	wg     sync.WaitGroup // ƒë·ª£i c√°c consumer d·ª´ng
	logger Logger         // logger custom
}

// New t·∫°o m·ªõi m·ªôt RabbitManager v·ªõi c·∫•u h√¨nh cfg nh∆∞ng CH∆ØA m·ªü k·∫øt n·ªëi t·ªõi
// RabbitMQ. H√†m tr·∫£ v·ªÅ con tr·ªè qu·∫£n l√Ω ‚Äì vi·ªác k·∫øt n·ªëi s·∫Ω ƒë∆∞·ª£c th·ª±c hi·ªán trong
// ph∆∞∆°ng th·ª©c Listen.
func New(cfg *Config, logger ...Logger) *RabbitManager {
	var l Logger
	if len(logger) > 0 && logger[0] != nil {
		l = logger[0]
	} else {
		l = &stdLogger{}
	}
	return &RabbitManager{
		cfg:      cfg,
		handlers: make(map[string]HandlerFunc),
		logger:   l,
	}
}

// Register ƒëƒÉng k√Ω m·ªôt ho·∫∑c nhi·ªÅu Handler. M·ªói Handler ƒë∆∞·ª£c √°nh x·∫° b·ªüi t√™n
// struct c·ª• th·ªÉ (l·∫•y th√¥ng qua getStructName). N·∫øu tr√πng t√™n, Handler sau s·∫Ω
// ghi ƒë√® Handler tr∆∞·ªõc.
func (m *RabbitManager) Register(h ...Handler) {
	m.lock.Lock()
	defer m.lock.Unlock()
	for _, hd := range h {
		n := getStructName(hd)
		m.handlers[n] = hd.Handle
	}
}

// Listen kh·ªüi t·∫°o c√°c Consumer (theo c·∫•u h√¨nh QueueConfig) v√† ch·∫°y v√≤ng l·∫∑p
// gi√°m s√°t connection. Ph∆∞∆°ng th·ª©c BLOCKS t·ªõi khi:
//   - Context b·ªã hu·ª∑ (ctx.Done())
//   - ho·∫∑c c√≥ l·ªói nghi√™m tr·ªçng x·∫£y ra khi kh·ªüi t·∫°o Consumer.
func (m *RabbitManager) Listen(ctx context.Context) error {
	if ctx == nil {
		ctx = context.Background()
	}
	m.ctx, m.cancel = context.WithCancel(ctx)

	// 1) Th·ª≠ k·∫øt n·ªëi m·ªôt l·∫ßn ngay ƒë·∫ßu
	if err := m.connect(); err != nil {
		m.logger.Errorf("[RabbitMQ] initial dial failed: %v (will retry in loop)", err)
	}

	// 2) T·∫°o & ch·∫°y consumer SAU khi (ƒë√£ ho·∫∑c s·∫Ω) c√≥ connection
	for key, qc := range m.cfg.RabbitMQ.Queues {
		hd, ok := m.handlers[key]
		if !ok { // kh√¥ng c√≥ handler t∆∞∆°ng ·ª©ng
			continue
		}
		c := &Consumer{cfg: qc, name: key, handler: hd, logger: m.logger}
		c.setConn(m.conn)
		m.consumers = append(m.consumers, c)
		m.wg.Add(1)
		go c.run(m.ctx, &m.wg) // truy·ªÅn WaitGroup
	}
	if len(m.consumers) == 0 {
		return errors.New("no consumers to start")
	}

	// 3) Ti·∫øp t·ª•c v√≤ng l·∫∑p reconnect nh∆∞ c≈©
	return m.connectionLoop()
}

// ---------------------------------------------------------------------------
// connectionLoop ‚Äì t·ª± ƒë·ªông Dial + NotifyClose + back‚Äëoff
// ---------------------------------------------------------------------------
//
// H√†m BLOKING: ch·∫°y t·ªõi khi ctx.Done().
func (m *RabbitManager) connectionLoop() error {
	backoff := m.cfg.RabbitMQ.ReconnectDelay
	if backoff == 0 {
		backoff = 5 * time.Second
	}
	max := time.Minute

	for {
		// th·ª≠ k·∫øt n·ªëi
		if err := m.connect(); err != nil {
			m.logger.Errorf("[RabbitMQ] dial error: %v", err)
		} else {
			m.logger.Infof("[RabbitMQ] connection established (%d consumers)", len(m.consumers))
			connClosed := make(chan *amqp.Error, 1)
			m.conn.NotifyClose(connClosed)
			select {
			case <-m.ctx.Done():
				m.closeConn()
				return nil
			case err := <-connClosed:
				m.logger.Errorf("[RabbitMQ] connection closed: %v", err)
			}
		}
		jitter := time.Duration(rand.Int63n(int64(backoff)))
		delay := backoff + jitter/2
		select {
		case <-time.After(delay):
		case <-m.ctx.Done():
			return nil
		}
		if backoff < max {
			backoff *= 2
			if backoff > max {
				backoff = max
			}
		}
	}
}

// ---------------------------------------------------------------------------
// connect ‚Äì dial RabbitMQ, c·∫≠p nh·∫≠t connection cho c√°c Consumer
// ---------------------------------------------------------------------------
func (m *RabbitManager) connect() error {
	var (
		conn *amqp.Connection
		err  error
	)
	url := m.cfg.RabbitMQ.URL
	if m.cfg.RabbitMQ.TLS {
		tlsCfg, tlsErr := loadTLSConfig(&m.cfg.RabbitMQ)
		if tlsErr != nil {
			return tlsErr
		}
		conn, err = amqp.DialTLS(url, tlsCfg)
	} else {
		conn, err = amqp.Dial(url)
	}
	if err != nil {
		return err
	}

	// l∆∞u connection
	m.lock.Lock()
	m.conn = conn
	m.lock.Unlock()

	// c·∫≠p nh·∫≠t connection cho t·∫•t c·∫£ Consumer (channel s·∫Ω t·ª± m·ªü)
	for _, c := range m.consumers {
		c.setConn(conn)
	}
	return nil
}

// closeConn ƒë√≥ng connection hi·ªán t·∫°i n·∫øu ƒëang m·ªü.
func (m *RabbitManager) closeConn() {
	m.lock.Lock()
	defer m.lock.Unlock()
	if m.conn != nil {
		_ = m.conn.Close()
		m.conn = nil
	}
}

// Stop hu·ª∑ context g·ªëc, t·ª´ ƒë√≥ k·∫øt th√∫c m·ªçi goroutine ƒë∆∞·ª£c sinh ra b·ªüi
// RabbitManager v√† Consumer.
func (m *RabbitManager) Stop() {
	if m.cancel != nil {
		m.cancel()
	}
	m.wg.Wait() // ƒë·ª£i c√°c consumer d·ª´ng
}

// ============================================================================
// üß© STRUCT Consumer ‚Äì 1 consumer t∆∞∆°ng ·ª©ng 1 queue + handler
// ============================================================================

// Tr·∫°ng th√°i consumer

type ConsumerStatus int

const (
	ConsumerStopped ConsumerStatus = iota
	ConsumerWaiting
	ConsumerRunning
	ConsumerError
)

func (s ConsumerStatus) String() string {
	switch s {
	case ConsumerStopped:
		return "stopped"
	case ConsumerWaiting:
		return "waiting"
	case ConsumerRunning:
		return "running"
	case ConsumerError:
		return "error"
	default:
		return "unknown"
	}
}

// Consumer ƒë·∫°i di·ªán cho m·ªôt worker ti√™u th·ª• m·ªôt h√†ng ƒë·ª£i c·ª• th·ªÉ. M·ªói Consumer
// c√≥ channel AMQP ri√™ng (multiplexed trong c√πng connection) v√† t·ª± ƒë·ªông kh√¥i
// ph·ª•c channel khi g·∫∑p s·ª± c·ªë. Vi·ªác kh·ªüi t·∫°o Consumer ƒë∆∞·ª£c th·ª±c hi·ªán b·ªüi
// RabbitManager.
type Consumer struct {
	// c·∫•u h√¨nh h√†ng ƒë·ª£i
	cfg     QueueConfig
	name    string      // t√™n (kh√≥a) c·ªßa consumer ‚Äì th∆∞·ªùng kh·ªõp v·ªõi struct handler
	handler HandlerFunc // h√†m x·ª≠ l√Ω message

	// t√†i nguy√™n AMQP
	ch     *amqp.Channel    // channel hi·ªán t·∫°i
	notify chan *amqp.Error // nh·∫≠n t√≠n hi·ªáu NotifyClose c·ªßa channel

	// b·∫£o v·ªá truy c·∫≠p connection (ƒë∆∞·ª£c RabbitManager share cho nhi·ªÅu Consumer)
	mu   sync.RWMutex
	conn *amqp.Connection

	status   ConsumerStatus
	statusMu sync.RWMutex
	logger   Logger
}

// ===== helper set/get connection an to√†n =====
func (c *Consumer) setConn(conn *amqp.Connection) {
	c.mu.Lock()
	c.conn = conn
	c.mu.Unlock()
}
func (c *Consumer) getConn() *amqp.Connection {
	c.mu.RLock()
	defer c.mu.RUnlock()
	return c.conn
}

// ---------------------------------------------------------------------------
// run ‚Äì v√≤ng l·∫∑p FI x X t·ª± gi√°m s√°t channel
// ---------------------------------------------------------------------------
func (c *Consumer) run(ctx context.Context, wg *sync.WaitGroup) {
	defer wg.Done()
	base, max := 5*time.Second, time.Minute
	backoff := time.Duration(0)
	for {
		c.setStatus(ConsumerWaiting)
		conn := c.getConn()
		if conn == nil || conn.IsClosed() {
			select {
			case <-time.After(base):
				continue
			case <-ctx.Done():
				c.setStatus(ConsumerStopped)
				return
			}
		}
		if err := c.openChannel(); err != nil {
			if backoff == 0 {
				c.logger.Debugf("[%s] waiting for connection‚Ä¶", c.name)
			} else {
				c.logger.Errorf("[%s] openChannel error: %v", c.name, err)
			}
			c.setStatus(ConsumerError)
		} else {
			backoff = base
			c.setStatus(ConsumerRunning)
			select {
			case <-ctx.Done():
				c.closeChannel()
				c.setStatus(ConsumerStopped)
				return
			case err := <-c.notify:
				if err != nil {
					c.logger.Errorf("[%s] channel closed: %v", c.name, err)
				}
				c.setStatus(ConsumerError)
			}
		}
		jitter := time.Duration(rand.Int63n(int64(backoff)))
		delay := backoff + jitter/2
		select {
		case <-time.After(delay):
		case <-ctx.Done():
			c.setStatus(ConsumerStopped)
			return
		}
		if backoff < max {
			backoff *= 2
			if backoff > max {
				backoff = max
			}
		}
	}
}

// ---------------------------------------------------------------------------
// openChannel ‚Äì m·ªü channel m·ªõi, khai b√°o topology v√† kh·ªüi ch·∫°y consumeLoop
// ---------------------------------------------------------------------------
func (c *Consumer) openChannel() error {
	conn := c.getConn()
	if conn == nil || conn.IsClosed() {
		return errors.New("connection not ready")
	}

	// m·ªü channel
	ch, err := conn.Channel()
	if err != nil {
		return err
	}

	// c√†i ƒë·∫∑t QoS (prefetch)
	prefetch := c.cfg.Prefetch
	if prefetch > 0 {
		if err = ch.Qos(prefetch, 0, false); err != nil {
			return err
		}
	}

	// khai b√°o queue + exchange (idempotent, n√™n g·ªçi m·ªói l·∫ßn reconnect)
	if err = declareTopology(ch, &c.cfg); err != nil {
		return err
	}

	// c·∫≠p nh·∫≠t tr·∫°ng th√°i
	c.ch = ch
	c.notify = ch.NotifyClose(make(chan *amqp.Error, 1))

	// ch·∫°y goroutine ti√™u th·ª• message
	go c.consumeLoop()
	c.logger.Infof("[%s] channel (re)started", c.name)
	return nil
}

// closeChannel ƒë√≥ng channel hi·ªán t·∫°i n·∫øu c√≥.
func (c *Consumer) closeChannel() {
	if c.ch != nil {
		_ = c.ch.Close()
		c.ch = nil
	}
}

// ---------------------------------------------------------------------------
// consumeLoop ‚Äì ƒëƒÉng k√Ω Consume v√† ƒë·ªçc message li√™n t·ª•c
// ---------------------------------------------------------------------------
func (c *Consumer) consumeLoop() {
	msgs, err := c.ch.Consume(
		c.cfg.Queue,
		c.cfg.ConsumerTag,
		c.cfg.AutoAck,
		false,
		false, false, nil,
	)
	if err != nil {
		c.logger.Errorf("[%s] consume error: %v", c.name, err)
		return
	}
	for m := range msgs { // v√≤ng l·∫∑p v√¥ h·∫°n t·ªõi khi channel ƒë√≥ng
		c.handleDelivery(&m)
	}
}

// ---------------------------------------------------------------------------
// handleDelivery ‚Äì g·ªçi business handler, tr·∫£ l·ªùi RPC (n·∫øu c√≥) & ack/nack
// ---------------------------------------------------------------------------
func (c *Consumer) handleDelivery(m *amqp.Delivery) {
	defer func() {
		if r := recover(); r != nil {
			c.logger.Errorf("[%s] panic: %v", c.name, r)
			_ = m.Nack(false, c.cfg.RequeueOnFail)
		}
	}()
	if c.handler == nil {
		c.logger.Errorf("[%s] handler is nil, message dropped", c.name)
		_ = m.Nack(false, c.cfg.RequeueOnFail)
		return
	}
	resp, err := c.handler(m.Body)
	if err != nil {
		c.logger.Errorf("[%s] handler error: %v", c.name, err)
		_ = m.Nack(false, c.cfg.RequeueOnFail)
		return
	}

	// n·∫øu ƒë√¢y l√† RPC request (ReplyTo != ""), publish tr·∫£ l·ªùi
	if m.ReplyTo != "" && resp != nil {
		timeout := 5 * time.Second // Gi√° tr·ªã m·∫∑c ƒë·ªãnh
		if c.cfg.RPCTimeout > 0 {
			timeout = c.cfg.RPCTimeout
		}
		publishCtx, cancel := context.WithTimeout(context.Background(), timeout)
		defer cancel()
		if err := c.ch.PublishWithContext(publishCtx, "", m.ReplyTo, false, false, amqp.Publishing{CorrelationId: m.CorrelationId, ContentType: "application/json", Body: resp}); err != nil {
			c.logger.Errorf("[%s] reply publish error: %v", c.name, err)
		}
	}
	if !c.cfg.AutoAck {
		_ = m.Ack(false)
	}
}

func (c *Consumer) setStatus(s ConsumerStatus) {
	c.statusMu.Lock()
	defer c.statusMu.Unlock()
	c.status = s
}
func (c *Consumer) GetStatus() ConsumerStatus {
	c.statusMu.RLock()
	defer c.statusMu.RUnlock()
	return c.status
}

// ============================================================================
// üõ†Ô∏è Helper: khai b√°o topology (exchange / queue / binding) idempotent
// ============================================================================
func declareTopology(ch *amqp.Channel, q *QueueConfig) error {
	if q.Passive {
		_, err := ch.QueueDeclarePassive(
			q.Queue, q.Durable, q.AutoDelete, false, false, q.Arguments,
		)
		return err
	}

	// 1. Exchange (n·∫øu c√≥)
	if q.Exchange != "" {
		exType := "direct"
		if q.BindingKey == "" { // kh√¥ng c√≥ routing key ‚áí fanout
			exType = "fanout"
		}
		if err := ch.ExchangeDeclare(
			q.Exchange, exType, q.Durable, q.AutoDelete,
			false, false, nil,
		); err != nil {
			return err
		}
	}

	// 2. Queue
	if _, err := ch.QueueDeclare(
		q.Queue, q.Durable, q.AutoDelete, false, false, q.Arguments,
	); err != nil {
		return err
	}

	// 3. Bind queue ‚Üî exchange (n·∫øu c√≥)
	if q.Exchange != "" {
		if err := ch.QueueBind(
			q.Queue, q.BindingKey, q.Exchange, false, nil,
		); err != nil {
			return err
		}
	}
	return nil
}

// ============================================================================
// üîê Helper: loadTLSConfig ‚Äì ƒë·ªçc file PEM & t·∫°o *tls.Config
// ============================================================================
func loadTLSConfig(cfg *RabbitMQConfig) (*tls.Config, error) {
	cert, err := tls.LoadX509KeyPair(cfg.ClientCert, cfg.ClientKey)
	if err != nil {
		return nil, err
	}

	caPem, err := os.ReadFile(cfg.CACert)
	if err != nil {
		return nil, err
	}
	pool := x509.NewCertPool()
	pool.AppendCertsFromPEM(caPem)

	return &tls.Config{
		Certificates: []tls.Certificate{cert},
		RootCAs:      pool,
		MinVersion:   tls.VersionTLS12,
	}, nil
}
